<?php

/**
 * @file
 * Contains advancedqueue_runner.module.
 */

include __DIR__ . "/src/Class/Runner.php";
use Drupal\Core\Logger\RfcLogLevel;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\advancedqueue_runner\Classes\Runner;

/**
 * Implements hook_help().
 */
function advancedqueue_runner_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the advancedqueue_runner module.
    case 'help.page.advancedqueue_runner':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module assist Advanced queue module for running in the background without activate cronjob or run command') . '</p>';
      return $output;

    default:
  }
  return "";
}

/**
 * Implements hook_theme().
 */
function advancedqueue_runner_theme() {
  return [
    'advancedqueue_runner' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * To resolve https://github.com/digitalutsc/advanced-queue-runner/issues/2.
 */
function set_environment_home() {
  // To resolve https://github.com/digitalutsc/advanced-queue-runner/issues/2
  if (empty(getenv('HOME'))) {
    if (!empty(posix_getpwuid(posix_getuid()))) {
      putenv("HOME=" . posix_getpwuid(posix_getuid())['dir']);
    }
  }
}

/**
 * Implements hook_cron().
 */
function advancedqueue_runner_cron() {

  $config = \Drupal::config('advancedqueue_runner.runnerconfig');
  if ($config->get("auto-restart-in-cron") == 1) {
    $pid = $config->get('runner-pid');
    if (isset($pid) && !empty($pid)) {
      // If the runner is already start, check if pid still exist.
      if (!Runner::statusByPid($pid)) {

        // Have to set home variable.
        set_environment_home();

        // If no, restart the runner with existing set config,.
        $newProcess = new Runner('php ' . __DIR__ . '/src/Scripts/jobs.php');
        $newPID = $newProcess->getPid();
        if ($newProcess->status()) {
          // Update $config->get('runner-pid')
          $config = \Drupal::service('config.factory')->getEditable('advancedqueue_runner.runnerconfig');
          $config->set('runner-pid', $newPID);
          $config->save();
        }
        else {
          drupal_log("Unable to restart the runner");
        }
      }
    }
  }
}

/**
 * Debug function: display any variable to error log.
 *
 * @param $thing
 */
if (!function_exists('print_log')) {

  /**
   * Print log to apache log.
   */
  function print_log($thing) {
    error_log(print_r($thing, TRUE), 0);
  }

}
/**
 * Debug function: display any variable to current webpage.
 *
 * @param $thing
 */
if (!function_exists('logging')) {

  /**
   * Print log to webpage.
   */
  function logging($thing) {
    echo "<pre>";
    print_r($thing);
    echo "</pre>";
  }

}

/**
 * Debug function: display any variable to drupal Reports Log messages.
 */
if (!function_exists('drupal_log')) {

  /**
   * Print log in Recent Log messages.
   */
  function drupal_log($msg, $type = "error") {
    switch ($type) {
      case "notice":
        \Drupal::logger(basename(__FILE__, '.module'))->notice($msg);
        break;

      case "log":
        \Drupal::logger(basename(__FILE__, '.module'))->log(RfcLogLevel::NOTICE, $msg);
        break;

      case "warning":
        \Drupal::logger(basename(__FILE__, '.module'))->warning($msg);
        break;

      case "alert":
        \Drupal::logger(basename(__FILE__, '.module'))->alert($msg);
        break;

      case "critical":
        \Drupal::logger(basename(__FILE__, '.module'))->critical($msg);
        break;

      case "debug":
        \Drupal::logger(basename(__FILE__, '.module'))->debug($msg);
        break;

      case "info":
        \Drupal::logger(basename(__FILE__, '.module'))->info($msg);
        break;

      case "emergency":
        \Drupal::logger(basename(__FILE__, '.module'))->emergency($msg);
        break;

      default:
        \Drupal::logger(basename(__FILE__, '.module'))->error($msg);
        break;
    }
  }

}
